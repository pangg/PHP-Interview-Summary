<?php
/*
 * 1. 变量的引用
 * */
/*//php引用变量：不同变量名指向同一地址。
//定义一个变量a，此时内存开辟了一块区域，$a指向该区域。
$a = 100;
var_dump($a);    //int 100
//定义变量b，将a变量的值赋值给b，此时该区域有两个变量（$a和$b）指向。
$b = $a;
var_dump($b);    //int 100
//修改$a变量的值，php变量具有Copy On Write的特性，所以会复制并重写a所指向的区域值，此时a和b分别指向不同区域。
$a = 10;
var_dump($a);    //int 10
var_dump($b);    //int 100

//------------------------------------------------------------------

$c = 100;
$d = &$c;
$c = 10;
var_dump($c);    //int 10
var_dump($d);    //int 10
//当引用指向时，php变量不在具有COW特性，且指向同一内存区域。

//* unset()只能消除变量的引用，不能删除其内存分配的空间
unset($c); 
var_dump($d);*/

//------------------------------------------------------------------

/*2. 函数的传址调用*/
function test1(&$a){
    $a=$a+100;
}
$b=1;
echo $b;//输出１
test1($b);   //这里$b传递给函数的其实是$b的变量内容所处的内存地址，通过在函数里改变$a的值　就可以改变$b的值了
echo "\n"; echo $b . "\n";//输出101

function &test(){
    //这个语句只会在该程序运行的第一次调用生效，但是这个值在函数执行结束后会被该函数记住，
    //也就是说下次执行到这个函数的，$a是已经存在的且值为上次运行后的值
    static $b=0;//申明一个静态变量    //只运行一次
    $b=$b+1;
    echo $b."\n";
    return $b;
}
$a=test();//这条语句会输出　$b的值　为１
$a=5; $a=test();//这条语句会输出　$b的值　为2
$a=&test();//这条语句会输出　$b的值　为3
$a=5; $a=test();//这条语句会输出　$b的值　为6
/*用上面的例子来解释就是 $a=test()方式调用函数，只是将函数的值赋给$a而已，　
而$a做任何改变，都不会影响到函数中的$b，而通过$a=&test()方式调用函数呢,
他的作用是　将return $b中的　$b变量的内存地址与$a变量的内存地址　指向了同一个地方 即产生了相当于这样的效果($a=&b;)
所以改变$a的值　也同时改变了$b的值　所以在执行了 $a=&test(); $a=5; 以后，$b的值变为了5*/

/*3. 数组引用*/
/*
例题：
    写出如下程序的输出结果：
    <?php
    $data = ['a','b','c'];
    foreach($data as $key=>$val){
        $val = &$data[$key];
    }
    问：最终$data的值是多少？
 */
    $data = ['a','b','c'];
    foreach($data as $key=>$val){
        $val = &$data[$key];
		
        print_r($data);
    }

/*
    1.$key = 0,
      $val = 'a',
      $val = &$d[0] =>'a'
      $data = ['a','b','c'];

    2.$key = 1,
      $val = 'b', =>$d[0]
      $val = &$d[1] =>'b'
      $data = ['b','b','c'];

    1.$key = 2,
      $val = 'c', =>$d[1]
      $val = &$d[2]=>'c'
      $data = ['b','c','c'];
 */
 
 /*4. 对象的引用 */
 //对象本身就是引用传递

class a{
    var $abc="ABC";
}
$b=new a;
$c=$b;
echo $b->abc;//这里输出ABC
echo $c->abc;//这里输出ABC
$b->abc="DEF";
echo $c->abc;//这里输出DEF
 